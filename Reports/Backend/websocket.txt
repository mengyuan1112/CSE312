Open-source websocket library Report:

Library used:
javax.websocket(CDDL 1.1GPL 2.0)
org.springframework(Apache)

Related files in project:
src/main/java/cse312/demo/APIController/chatController.java
This fileâ€™s purpose is only for debugging purpose in backend which might be deleted in the future. The code mainly use org.springframework.web.servlet.ModelAndView to wrap a GET request as a ModelandView type, then return to the client side which will initialize a new interface.
Source Code: https://github.com/spring-projects/spring-framework/blob/master/spring-webmvc/src/main/java/org/springframework/web/servlet/ModelAndView.java

src/main/java/cse312/demo/Configuration/wsConfig.java
This file is for configure the websocket to be functional by using the ServerEndpointExporter class detects beans of type ServerEndpointConfig and registers with the standard Java Websocket runtime. 
Source Code: https://github.com/spring-projects/spring-framework/blob/master/spring-websocket/src/main/java/org/springframework/web/socket/server/standard/ServerEndpointExporter.java

Core File: src/main/java/cse312/demo/Service/ChatServer.java
This file used javax.websocket package in tomcat-embed-websocket:
https://javaee.github.io/javaee-spec/javadocs/javax/websocket/package-summary.html
For establish WebSocket which is a two-way communication application layer protocol based on TCP. The Endpoint class is used to implement WebSocket-related business logic and process WebSocket data frames. In this project, we use the javax.websocket.RemoteEndpoint (https://github.com/javaee/websocket-spec/blob/master/api/client/src/main/java/javax/websocket/RemoteEndpoint.java)  instance represents the client.
Handshake:
@ServerEndpoint (https://github.com/javaee/websocket-spec/blob/master/api/server/src/main/java/javax/websocket/server/ServerEndpoint.java)  needs to specify a URI. In our code, when the client initiates a WebSocket handshake HTTP request to /chat/{username}, a new ChatServer instance will be created by default and the @OnOpen modified method will be called.
The library provides 4 annotations for decorating methods: @OnOpen, @OnMessage, @OnError, @OnClose. The modified methods are used to call back when the connection is established, call back when a data frame is received, and call back when the processing logic is abnormal, call back when the connection is closed. For the method that annotated by one of these 4 annotation, the user can specify a Session type parameter in the parameter list of any method.
Send websocket data frame:
By using the feature in Session (https://github.com/javaee/websocket-spec/blob/master/api/client/src/main/java/javax/websocket/Session.java), which can do all the operation with the websocket data. For send text, we use RemoteEndpoint.Basic getBasicRemote() to send websocket data frame to the client, which we have the choice that use sendText() to send string type message with opcode 0x1, and sendBinary() to send data in bytes with opcode(0x2). RemoteEndpoint send data by the Encoder class which can encode Binary or Text. (https://github.com/javaee/websocket-spec/blob/master/api/client/src/main/java/javax/websocket/Encoder.java) 
Receive and process websocket data frame:
When the web container receives a data frame, because the Endpoint has been determined during the handshake phase, it only needs to determine whether it is binary data or character data according to the opcode field of the WebSocket data frame. The former uses Decoder.Binary to implement the class. The latter uses Decoder.Text to implement the class. After parsing into a Java object, send it like discussed before in the method modified by @OnMessage.
Decoder: https://github.com/javaee/websocket-spec/blob/master/api/client/src/main/java/javax/websocket/Decoder.java 


